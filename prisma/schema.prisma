// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  skills        Skill?
  events        Event[]
  registrations Registration[]
}

model Skill {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  passing     Int
  shooting    Int
  teamwork    Int
  defending   Int
  positioning Int
  position    String?
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  date          DateTime
  time          String
  location      String
  type          String
  maxPlayers    Int
  description   String?
  creatorEmail  String
  creator       User           @relation(fields: [creatorEmail], references: [email], onDelete: Cascade)
  registrations Registration[]
  result        Result?
}

model Result {
  id         Int   @id @default(autoincrement())
  eventId    Int   @unique
  event      Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  team1Score Int
  team2Score Int
}

model Registration {
  id        Int                @id @default(autoincrement())
  userId    Int
  eventId   Int
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  status    RegistrationStatus @default(REGISTERED)
  team      Int?
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  CANCELLED
}